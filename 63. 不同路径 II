//动态规划

//方法一：空间复杂度为O(m*n)
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        if(obstacleGrid.empty())
            return 0;
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        if(m == 1 && n == 1){
            if(obstacleGrid[0][0] == 0) return 1;
            else return 0;
        }
        vector<vector<long> > dp(m, vector<long>(n, 0));
        for(int i = 0; i < n; i++){
            if(obstacleGrid[0][i] == 1) break;
            else dp[0][i] = 1;
        }
        for(int i = 0; i < m; i++){
            if(obstacleGrid[i][0] == 1) break;
            else dp[i][0] = 1;
        }
        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                if(obstacleGrid[i][j] == 1) dp[i][j] = 0;
                else{
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
                }
            }
        }
        return dp[m - 1][n - 1];
    }
};


//方法二：空间复杂度为O(n)
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        if(obstacleGrid.empty() || obstacleGrid[0].empty() || obstacleGrid[0][0] == 1)
            return 0;
        int m = obstacleGrid.size(), n = obstacleGrid[0].size();
        
        vector<long> dp(n, 0);
        dp[0] = 1;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(obstacleGrid[i][j] == 1) dp[j] = 0;
                else if(j > 0) dp[j] += dp[j - 1];
            }
        }
        return dp[n - 1];
    }
};

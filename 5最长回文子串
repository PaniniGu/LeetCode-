//暴力解决，时间复杂度O(n^3)


class Solution {
public:
    
    string longestPalindrome(string s) {
        int len = s.length();
        int MaxLength=0;
        int Max_i=0;
        int Max_j=0;
        
        for(int i=0; i<len; i++){
            for(int j=len-1; j>i; j--){  
                int tem_i=i;
                int tem_j=j;
                if(s[i]==s[j]){
                    //cout<<i<<' '<<j<<endl;
                    int k=1;
                    for(; k<(j-i)/2+1; k++){
                        
                        if( s[i+k]!=s[j-k] )
                            break;
                    }
                    if(k==((j-i)/2+1)){   //找到回文串
                        if((tem_j - tem_i) > MaxLength){  //找到更大的回文串，更新索引
                            Max_i = tem_i;
                            Max_j = tem_j;
                            MaxLength = Max_j - Max_i;
                        } 
                    }
                }
            }
            }
        return s.substr(Max_i,MaxLength+1);
    }
};

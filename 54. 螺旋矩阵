class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        //判断输入是否为空
        if(matrix.empty())
            return {};
        int m = matrix.size();
        int n = matrix[0].size();
        
        vector<vector<int> > visit(m, vector<int>(n, 0));
        vector<int> res;
        int i =0, j = 0;
        res.push_back(matrix[0][0]);
        visit[0][0] = 1;
        int cnt = 1;
        while(cnt < m * n){
            while(j < n-1 && visit[i][j + 1] == 0){  //右边还有未访问的元素,向右访问
                res.push_back(matrix[i][++j]);
                visit[i][j] = 1;
                cnt++;
            }
            while(i < m - 1 && visit[i + 1][j] == 0){  //下方还有未访问的元素，向下访问
                res.push_back(matrix[++i][j]);
                visit[i][j] = 1;
                cnt++;
            }
            while(j > 0 && visit[i][j - 1] == 0){    //左方还有未访问的元素，向左访问
                res.push_back(matrix[i][--j]);
                visit[i][j] = 1;
                cnt++;
            }
            while(i > 0 && visit[i - 1][j] == 0){    //上方还有未访问的元素，向上访问
                res.push_back(matrix[--i][j]);
                visit[i][j] = 1;
                cnt++;
            }
        }
        return res;
            
    }
};

//方法一：Runtime: 20 ms, faster than 10.09% of C++ online submissions for Best Time to Buy and Sell Stock II.
// Memory Usage: 9.3 MB, less than 96.81% of C++ online submissions for Best Time to Buy and Sell Stock II.

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if(prices.size() <= 1) return 0;
        
        int flag = 0; //记录当前是否持有股票
        int buy = 0, sell = 0;
        int res = 0;
        for(int i = 1; i < prices.size(); i++){
            if(prices[i] > prices[i-1] && flag == 0){   //出现低价且未持有股票时，买入
                buy = prices[i-1];
                flag = 1;
            }
            if(flag == 1 && prices[i] < prices[i-1]){
                sell = prices[i-1];
                res = res + (sell - buy);
                flag = 0;
            }
            if(flag == 1 && i == prices.size()-1){
                sell = prices[i];
                res = res + (sell - buy);
                flag = 0;
            }
        }
        return res;
    }
};

//方法二：Runtime: 8 ms, faster than 99.40% of C++ online submissions for Best Time to Buy and Sell Stock II.
// Memory Usage: 9.5 MB, less than 43.63% of C++ online submissions for Best Time to Buy and Sell Stock II.
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if(prices.size() <= 1) return 0;

        int res = 0;
        for(int i = 1; i < prices.size(); i++){
            if(prices[i] > prices[i - 1])
                res += (prices[i] - prices[i - 1]);
        }
        return res;
    }
};

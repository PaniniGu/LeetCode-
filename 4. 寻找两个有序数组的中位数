//复杂度为m+n，还比较高

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int num1 = nums1.size();
        int num2 = nums2.size();
        int i=0;
        int j=0;
        
        vector<int> nums3;        
        while(i < num1 && j < num2){
            if(nums1[i] < nums2[j]){
                nums3.push_back(nums1[i]);
                i++;
            }
            else{
                nums3.push_back(nums2[j]);
                j++;
            }
        }
        while(i < num1){
            nums3.push_back(nums1[i]);
            i++;
        }
        while(j < num2){
            nums3.push_back(nums2[j]);
            j++;
        }
        return ((num1+num2)%2!=0)?nums3[(num1+num2)/2]:(nums3[(num1+num2)/2 - 1] + nums3[(num1+num2)/2]) * 1.0 / 2;
    }
};



//复杂度为O(log(m+n))

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        //sumNum为nums1和nums2的总个数和
        int sumNum = nums1.size() + nums2.size();
        //用于判断总个数是奇数还是偶数，如果是奇数，那么中位数只有1个，如果是偶数，那么中位数有2个
        bool isOdd;
        double avgNum;
        int k;
        if ((sumNum & 1) == 1){
            //奇数中的中位数是 总数/2+1
            k = sumNum / 2 + 1;
            isOdd = true;
        }
        else{
            k = sumNum / 2;
            isOdd = false;
        }
        while (k != 1){
            //这里分情况讨论，如果k/2比整个nums1都大，那么只判断nums1的最后一个数字和nums2的k/2个数即可，
            if ((k / 2)>nums1.size()){
                if (nums1.size() == 0){
                    break;
                }
                if (nums1[nums1.size() - 1]<nums2[k / 2 - 1]){
                    k = k - nums1.size();
                    nums1.clear();
                }
                else{
                    nums2.erase(nums2.begin(), nums2.begin() + k / 2);
                    k = k - (k / 2);
                }
            }
            //如果k/2比整个nums2都大，那么只判断nums2的最后一个数字和nums1的k/2个数即可，
            else if ((k / 2)>nums2.size()){
                if (nums2.size() == 0){
                    break;
                }
                if (nums2[nums2.size() - 1]<nums1[k / 2 - 1]){
                    k = k - nums2.size();
                    nums2.clear();
                }
                else{
                    nums1.erase(nums1.begin(), nums1.begin() + k / 2);
                    k = k - (k / 2);
                }
            }
            //如果nums1和nums2中个数都大于k/2，那么直接判断nums1[k/2]和nums2[k/2]即可，这里nums1[k/2-1]是因为数组是从0开始计数的
            else{
                if (nums1[k / 2 - 1] <= nums2[k / 2 - 1]){
                    nums1.erase(nums1.begin(), nums1.begin() + k / 2);
                }
                else{
                    nums2.erase(nums2.begin(), nums2.begin() + k / 2);
                }
                k = k - (k / 2);
            }
        }
        //根据奇偶来判断中位数的个数是2个还是1个
        if (isOdd){
            if (nums1.size() == 0){
                avgNum = nums2[k - 1];
            }
            else if (nums2.size() == 0){
                avgNum = nums1[k - 1];
            }
            else{
                if (nums1[k - 1]<nums2[k - 1]){
                    avgNum = nums1[k - 1];
                }
                else{
                    avgNum = nums2[k - 1];
                }
            }
        }
        else{
            if (nums1.size() == 0){
                avgNum = (nums2[k - 1] + nums2[k]) / 2.0;
            }
            else if (nums2.size() == 0){
                avgNum = (nums1[k - 1] + nums1[k]) / 2.0;
            }
            else{
                //对于偶数这边的计算要比较当心，会出现几种情况：
                //1、nums1[k-1]和nums1[k]都小于nums2[k-1]，那么就取nums1[k-1]和nums1[k]的平均即可
                //2、nums2[k-1]和nums2[k]都小于nums1[k-1]，那么就取nums2[k-1]和nums2[k]的平均即可
                //3、nums1[k-1]和nums2[k-1]是相对nums1[k-1]、nums1[k]、nums2[k-1]、nums2[k]这4个数字中最小的2个，那么取nums1[k-1]和nums2[k-1]的平均即可
                if (nums1[k - 1]<nums2[k - 1]){
                    if (nums1.size() - 1 >= k){
                        if (nums1[k]<nums2[k - 1]){
                            avgNum = (nums1[k - 1] + nums1[k]) / 2.0;
                        }
                        else{
                            avgNum = (nums1[k - 1] + nums2[k - 1]) / 2.0;
                        }
                    }
                    else{
                        avgNum = (nums1[k - 1] + nums2[k - 1]) / 2.0;
                    }
                }
                else{
                    if (nums2.size() - 1 >= k){
                        if (nums1[k - 1]<nums2[k]){
                            avgNum = (nums1[k - 1] + nums2[k - 1]) / 2.0;
                        }
                        else{
                            avgNum = (nums2[k - 1] + nums2[k]) / 2.0;
                        }
                    }
                    else{
                        avgNum = (nums1[k - 1] + nums2[k - 1]) / 2.0;
                    }
                }
            }
        }
        return avgNum;
    }
};

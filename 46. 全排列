//方法一：递归，暴力解答
class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int> > ans;
        
        if(nums.empty())
            return {{}};
        if(nums.size() == 1)
            return {{nums[0]}};
        else{
            int len = nums.size();
            for(int i = 0; i < len; i++){
                vector<vector<int> > tmp1;
                vector<int> tmp2;
                tmp2 = nums;
                tmp2.erase(tmp2.begin() + i);
                tmp1 = permute(tmp2);
                int len_tmp = tmp1.size();
                for(int j = 0; j < len_tmp; j++){
                    tmp1[j].insert(tmp1[j].begin(), nums[i]);
                }
                ans.insert(ans.end(), tmp1.begin(), tmp1.end());
            }
        }
        return ans;
        
    }
};



//方法二：DFS
class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int> > ans;
        if(nums.empty())
            return {{}};
        if(nums.size() == 1)
            return {{nums[0]}};
        else{
            vector<int> tmp(nums.size(), 0);
            vector<int> cur;
            dfs(ans, nums, tmp, cur);
            }
        return ans;
        }
     
    void dfs(vector<vector<int> >& ans, vector<int>& nums, vector<int>& tmp, vector<int>& cur){
        if(cur.size() == nums.size()){
            ans.push_back(cur);
            return;
        }
        for(int j = 0; j < nums.size(); j++){
            if(tmp[j] == 0){
                cur.push_back(nums[j]);
                tmp[j] = 1;
                dfs(ans, nums, tmp, cur);
                cur.pop_back();
                tmp[j] = 0;
            }
        }   
    }
};

//DFS

class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int> > res;
        if(nums.empty()) return res;
        
        vector<int> cur;
        for(int i = 0; i <= nums.size(); i++){
            dfs(res, cur, nums, 0, i);
        }
        return res;
    }
    
    void dfs(vector<vector<int> >& res, vector<int>& cur, vector<int>& nums, int i, int s){
        if(cur.size() == s){
            res.push_back(cur);
            return;
        }
        for(int j = i; j < nums.size(); j++){
            cur.push_back(nums[j]);
            dfs(res, cur, nums, j+1, s);
            cur.pop_back();
        }
    }
};

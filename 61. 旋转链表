/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(k == 0 || head == NULL || head->next == NULL) //k等于0 或者 只有一个节点，返回本身
            return head;
        
        ListNode* tmp1;
        tmp1 = head;
        int count = 1;
        //先看看有多少个节点
        while(tmp1->next != NULL){
            count++;
            tmp1 = tmp1->next;
        }
        k = k % count;
        if(k == 0)
            return head;
       
        while(k > 0){
            ListNode* tmp;
            tmp = head;
            while(tmp->next->next != NULL)
                tmp = tmp->next;   //找到最后一个节点的上一个节点
            tmp->next->next = head;  //将最后一个节点的next指针指向头结点
            head = tmp->next;   //更新头结点
            tmp->next = NULL; //将倒数第二个节点指向NULL，变成最后一个节点
            k--;
        }
        return head;
    }
};

//解法一：空间复杂度O(m * n)
class Solution {
public:
    int uniquePaths(int m, int n) {
        //判断特殊输入
        if(n == 1 && m == 1)
            return 1;
        vector<vector<int> > res(m, vector<int>(n, 1));
        res[0][0] = 0;
        //动态规划
        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++)
                res[i][j] = res[i - 1][j] + res[i][j - 1];
        }
        return res[m - 1][n - 1];
    }
};


//解法二：空间复杂度O(n)
class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<int> dp(n, 1);
        for (int i = 1; i < m; ++i) {
            for (int j = 1; j < n; ++j) {
                dp[j] += dp[j - 1]; 
            }
        }
        return dp[n - 1];
    }
};

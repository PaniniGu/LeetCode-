class Solution {
public:
    string addBinary(string a, string b) {
        int n1 = a.length(), n2 = b.length();
        int n = max(n1, n2) + 1;
        
        string res(n,'0');
        int i = 0, tmp = 0;
        while(i < n1 && i < n2){
            if(a[n1-1-i] == '1' && b[n2-1-i] =='0' || a[n1-1-i] == '0' && b[n2-1-i] =='1'){
                if(tmp == 1) {res[n-1-i] = '0'; i++;}
                else {res[n-1-i] = '1'; i++;}
            }
            else if(a[n1-1-i] == '0' && b[n2-1-i] =='0'){
                if(tmp == 1) {res[n-1-i] = '1'; tmp = 0; i++;}
                else {res[n-1-i] = '0'; i++;}
            }
            else{
                if(tmp == 1) {res[n-1-i] = '1'; i++;}
                else {res[n-1-i] = '0';tmp = 1; i++;}
            }
        }
        while(i < n1){
            if(tmp == 1){
                if(a[n1-1-i] == '1') {res[n-1-i] = '0'; i++;}
                else{res[n-1-i] = '1'; tmp = 0; i++;}
            }
            else {res[n-1-i] = a[n1-1-i]; i++;}
        }
        while(i < n2){
            if(tmp == 1){
                if(b[n2-1-i] == '1') {res[n-1-i] = '0'; i++;}
                else{res[n-1-i] = '1'; tmp = 0; i++;}
            }
            else {res[n-1-i] = b[n2-1-i]; i++;}
        }
        if(tmp == 1)
            res[0] = '1';
        //处理第一个字符，看是否有进位
        if(res[0] == '0') {res.erase(res.begin());}
        
        return res;
    }
};

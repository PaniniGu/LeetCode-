//DFS

class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int> > ans;
        
        if(nums.empty())
            return {{}};
        else if(nums.size() == 1)
            return {{nums[0]}};
        else{
            vector<int> visit(nums.size(), 0);
            vector<int> cur;
            sort(nums.begin(), nums.end());
            dfs(ans, nums, visit, cur);
        }
        return ans;
    }
    
    void dfs(vector<vector<int> >& ans, vector<int>& nums, vector<int>& visit, vector<int>& cur){
        if(cur.size() == nums.size()){
            ans.push_back(cur);
            return;
        }
        for(int i = 0; i < nums.size(); i++){
            if (visit[i] == 1) continue;
            if( i > 0 && nums[i] == nums[i-1] && visit[i-1] == 0) continue;  //去重
            if(visit[i] == 0){
                visit[i] = 1;
                cur.push_back(nums[i]);
                dfs(ans, nums, visit, cur);
                cur.pop_back();
                visit[i] = 0;
            }
        }
    }
};

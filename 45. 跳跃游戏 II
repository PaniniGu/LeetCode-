//贪心算法
class Solution {
public:
    int jump(vector<int>& nums) {
        int ans = 0, n = nums.size(), i = 0, cur =0;
        while(cur < n - 1){
            ++ans;
            int pre = cur;
            for(; i <= pre; i++){
                cur = max(cur, i + nums[i]);
            }
        }
        return ans;
    }
};



//方法二：动态规划，但会超时
class Solution {
public:
    int jump(vector<int>& nums) {
        if(nums.empty())
            return 0;
        
        int len = nums.size();
        vector<int> ans(nums.size(), 0);
        for(int i =1; i < len; i++){
            for(int j = 0; j < i; j++){
                if(nums[j] >= i - j){  //能从第j个位置跳到第i个位置
                    ans[i] = ans[j] + 1;
                    break;
                }
            }
        }
        return ans[len-1];
    }
};

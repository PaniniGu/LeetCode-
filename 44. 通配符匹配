//方法一：动态规划
class Solution {
public:
    bool isMatch(string s, string p) {
        int m = s.length();
        int n = p.length();
        
        vector<vector<int> > dp(m+1, vector<int>(n+1, 0));
        dp[0][0] = 1;
        for(int i = 1; i < n+1; i++){
            if(p[i-1] == '*') dp[0][i] = dp[0][i-1];
        }
        for(int i = 1; i <= m; i++){
            for(int j = 1; j<= n; j++){
                if(dp[i-1][j-1] ==  1 && (s[i-1]==p[j-1] || p[j-1]=='*' || p[j-1]=='?'))
                    dp[i][j] = 1;
                else if(dp[i][j-1] == 1 && p[j-1]=='*')
                    dp[i][j] = 1;
                else if(dp[i-1][j] == 1 && p[j-1]=='*')
                    dp[i][j] = 1;
            }
        }
        return dp[m][n];
    }
};

//方法二：贪心算法

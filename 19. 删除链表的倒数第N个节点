//最蠢的方法

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        //判断输入空指针
        if(head == NULL)
            return NULL;
        
        ListNode* ans = head;
        
        //先求链表的节点总数
        int count = 1;
        while(head->next != NULL){
            count += 1;
            head = head->next;
        }
        
        //判断n与链表节点数的大小
        if(n > count){
            cout<<"n大于链表节点数";
            return NULL;
        }
        else{
            ListNode* re = ans;
            int temp = 0;
            int index = count - n;  //记录待删除节点的索引序号
            if(index == 0){
                ans = ans->next;  //删除头结点
                return ans;
            }
            else{
                while(temp < index - 1){  //找到待删除节点的上一个节点
                    re = re->next;
                    temp += 1;
                }
                re->next = re->next->next;
                return ans;
            }
        }
    }
};



//用两个指针
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        //判断输入空指针
        if(head == NULL)
            return NULL;
        
        ListNode* first = head;
        ListNode* second = head;
        
        if(first->next == NULL){ //如果只有一个节点
            return NULL;
        }

        //先让第一个指针走n步
        while(n > 0){
            first = first->next;
            n--;
        }
        if(first == NULL){   //判断是否要删除头结点
            return head->next;
        }
        else{
        //两个指针一起往前走，直至first到达尾部       
            while(first->next != NULL){
                first = first->next;
                second = second->next;
            }
            second->next = second->next->next;
            return head;
        }
    }
};
         

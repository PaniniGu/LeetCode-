class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        if(board.empty()) return false;
        int m = board.size();
        int n = board[0].size();
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(dfs(board, word, i, j, 0)) return true;
            }
        }
        return false;
    }
    bool dfs(vector<vector<char> >& board, const string& word, int i, int j, int s){
        //判断位置i, j是否出界, 并判断是否匹配上
        if(i < 0 || j < 0 || i >= board.size() || j>= board[0].size() || board[i][j] != word[s]) return false;
        
        //现在匹配上了，看看是不是匹配到最后一个字符了
        if(s == word.length() - 1) return true;
        
        char tmp = board[i][j];
        board[i][j] = 0;    //避免访问重复的位置
        bool found = dfs(board, word, i-1, j, s+1) || dfs(board, word, i+1, j, s+1) || dfs(board, word, i, j-1, s+1)
            || dfs(board, word, i, j+1, s+1);
        board[i][j] = tmp;
        return found;
    }
};
